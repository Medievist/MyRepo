[Medievist]
Global setup:

Set up git
    git config --global user.name "Your Name"
    git config --global user.email medievist@gmail.com

Add your public key

Next steps:
    mkdir My
    cd My
    git init
    touch README
    git add README
    git commit -m 'first commit'
    git remote add origin git@github.com:Medievist/My.git
    git push -u origin master

Existing Git Repo?
    cd existing_git_repo
    git remote add origin git@github.com:Medievist/My.git
    git push -u origin master

============================================================

Получение репозитория
Переходим в директорию для работы, и запускаем
git clone ssh://git@СЕРВЕР:ПОРТ/РЕПОЗИТОРИЙ.git
Основные используемые функции
1. Обновление текущей ветки из центрального репозитория:
git pull
2. Отправка текущей ветки в центральный репозиторий:
git push origin branchname
3. Переключение на некоторую ветку:
git checkout branchname
При переключении на ветку, которой еще нет в локальном репозитории, будет создана
локальная ветка, связанная с удалённой.
4. Создание новой ветки, базирующейся на текущей
git checkout -b branchname
5. Удаление веток
git branch -d branchname == удаление локальной уже слитой ветки
git branch -D branchname == принудительное удаление локальной ветки
git push origin :branchname == удаление ветки с центрального репозитория
6. Слияние ветки с текущей
git merge --no-ff branchname
7. Посмотреть какие файлы изменены в текущей директории:
git status
8. Просмотреть текущие изменения:
git diff
9. Сохранение текущих изменений:
git add именафайлов == добавить измененные/созданные файлы/директории
git rm именафайлов == добавить удаление файла/директории
git commit == сохранить добавленные изменения. Откроется редактор, чтобы
ввести комментарий к коммиту
git commit -a == сохранить все добавленные изменения и все измененные
файлы. Позволяет сохранять все изменения, если файлы не добавлялись.



Стандартные процедуры работы
1. «Начало работы над задачей».
Выполняется перед началом работы над задачей. Дерево должно быть без изменений.
git checkout master
git pull
git checkout -b branchname
2. «Коммит очередного кусочка работы».
Выполняется после выполнения некого изменения, суть которого целостная.
# проверяем, какие файлы изменились к текущему моменту
# удаляем если что-то попало совсем лишее
git status
# смотрим текст изменений, на предмет соответствия
# правилам ведения чистых коммитов. удаляем, если какой-либо мусор попал
git diff
# если какие-либо файлы не должны попасть в коммит (например,
# относятся к другому атомарному изменению.)
# то помечаем только те файлы, изменения которых нужно сохранить
git add …
git rm …
# сохраняем. -m можно опустить, тогда комментарий через редактор
git commit -m "Some commit message"
# если все на текущий момент созданные изменения нужно сохранить, то
# через git add добавляем новые файлы, а всё остальное сохраняем через
git commit -a -m "Some commit message"
3. «Отправка ветки на центральный репозиторий»
Выполняется после завершения работы, либо в конце каждого дня (чтобы был бакап
на сервере), либо если нужно какие-то изменения показать коллеге.
git push origin branchname
Не следует делать push после каждого коммита, так как это потребует доступа до
удалённого сервера, и, соответственно, времени, потраченного впустую.
4. «Ребейз относительно мастера».
Выполняется перед заливкой на сервер законченной задачи, когда все изменения уже
закоммичены:
git checkout master
git pull
git checkout branchname
git rebase master
При возникновении конфликтов, нужно:
(*)
git status == проверить файлы, для которых есть неразрешенные
конфликты
== редактируем первый файл с конфликтом.
Находим в нем «<<<<<». То, что между <<<<< и ==== –
содержит копию текста из master ветки, то что между ===== и >>>>> содержит текст
из нашей ветки. Нужно на этом месте оставить одну единую версию, содержащую
общий код и мастера и нашей ветки
git add измененный_файл
перейти на (*)
После исправления конфликтов во всех файлах, запускаем
git rebase --continue
Если конфликты несовместимые с дальнейшим продолжением ребейза
git rebase --abort == прерывает ребейз и возвращает ветку в исходное
состояние (до начала ребейза)
После ребейза обновляем состояние ветки в центральном репозитории
git push origin branchname -f
5. «Кратковременное сохранение состояния изменений».
Выполняется, если требуется временно приостановить работу над текущей веткой на
короткое время (например, на ревью, или чтобы сделать какую-либо двухминутную
задачу).
git stash save
После этого дерево чисто, можно переключиться на другую ветку/мастер и так далее,
поработать, после чего восстановить состояние с помощью
git checkout originalbranch
git stash pop
Тем самым восстановив состояние изменения.
6. «Длительное сохранение состояния изменений».
Выполняется в конце рабочих суток, чтобы даже частичные изменения были
забакаплены; либо при необходимости срочно переключиться на решение другой
задачи, которая может занять значительно больше 5-10 минут.
git add .
git commit -m "Partial commit"
git push origin branchname
Позже, для возврата к тому же состоянию как было до, выполняется
git checkout branchname
git reset --soft HEAD^
git reset HEAD .
Важно! После такой процедуры сохранения/восстановления, при следующем
git push origin branchname
Будет выдано предупреждение о непоследовательном изменении. Чтобы
принудительно отправит изменения, следует добавить опцию -f.
git push -f origin branchname
Важно: не следует добавлять -f всегда, так как это спасёт от случайных опечаток в
названии ветки, например.
7. «Ревью ветки».
Выполняется на чистом дереве, временно сохраните изменения согласно пункта 5,
если требуется.
git checkout master
git pull
git branch -D branchname
git checkout branchname
git rebase master == ветка обязана наложиться без конфликтов
git diff master
== изучаем разницу от мастера или общим диффом, или
git log master..HEAD
== смотрим какие коммиты были между мастером и текущей веткой
== если всё хорошо, делаем
git checkout master
git merge --no-ff branchname
git push origin master
git push origin :branchname
git branch -d branchname